---
title: "Gold Export Trends and Opportunities in African Markets"
subtitle: "Updated: `r format(Sys.Date(), '%B %d, %Y')`"
toc: true
format:
  html:
    html-math-method: katex
    code-tools: true
    self-contained: true
    page-layout: full
    grid:
      sidebar-width: 0px
      body-width: 1100px
      margin-width: 200px
      gutter-width: 1.5rem
  pdf: default
execute:
  warning: false
---

**Prepared By:** Group 3

**Department:** Data Science & Business Analytics

**Organization**: University of Europe for Applied Sciences


# Executive Summary  

### Purpose 

Summarize the objective of the report, e.g., “To analyze trends in gold exports from African countries and provide strategic recommendations for enhancing trade opportunities.” 

### Key Insights

Briefly outline key findings, e.g., “South Africa leads in gold exports, while emerging players like Ghana are increasing their market share.” 

### Recommendations

Highlight actionable strategies, e.g., “Develop partnerships with small-scale miners in high-growth regions.” 


# Introduction 

### Background 

Provide context on African gold exports, including global market dynamics and Africa's role as a key player. E.g., “Gold contributes significantly to the economies of countries like Ghana, South Africa, and Tanzania, accounting for a substantial share of exports.” 

### Objective 

Clearly state the report’s purpose, e.g., “To identify export trends, assess regional performance, and uncover new opportunities for trade.” 

### Scope

This report analyzes gold export and import data from 2017 to 2023, focusing on two African countries: South Africa and Kenya.

# Data and Methodology 

### Data Sources: 

* International trade databases (e.g., UN Comtrade, World Bank). 

* Local mining data from national agencies. 

* Market trends from Bloomberg or commodity reports. 

### Data Preprocessing: 

* Handling missing data (e.g., export volumes, pricing trends). 

* Currency normalization for value comparisons. 

### Methodology: 

* Analytical techniques: trend analysis, regression models, clustering for country groupings. 

* Tools used: Python (Pandas, Matplotlib), R, or Power BI/Tableau for visualization. 

### Assumptions: 

* Stable exchange rates. 

* Reported gold production/export data is accurate. 

# Analysis and Insights

### Load the Libraries and pre-processed Data

```{r}
library(ggplot2)
library(tidyverse)
library(sf)

library(lubridate)
library(knitr)

library(RColorBrewer)
library(wesanderson)

library(patchwork)
library(scales)
library(gt)

library(gtExtras)
library(summarytools)
```

### Total Gold export worldwide 2017-2023

```{r}
#| code-fold: true

df <- read.csv(file = "../data/all_export.csv", row.names = NULL)

colnames(df) <- colnames(df)[2:ncol(df)]
df <- df[1:(ncol(df)-1)]

df <- df[c("refYear", "reporterISO", "reporterDesc", "partnerDesc", "cmdCode", 
           "qtyUnitAbbr", "qty", "altQtyUnitAbbr", "altQty", "primaryValue")]

colnames(df)[1] <- "date"
df$date <- lubridate::ymd(df$date, truncated = 2L)

df <- df %>% group_by(reporterISO) %>% summarise(total = sum(primaryValue))

sf_world <- st_as_sf(rworldmap::getMap(resolution = "low")) %>% st_transform(crs = "+proj=moll") %>% dplyr::select(ISO_N3, ISO_A3)
colnames(sf_world)[2] <- "reporterISO"

test <- merge(sf_world, df, by = "reporterISO", all.x = TRUE)
#RecordLinkage::levenshteinSim(df$reporterDesc, sf_world$name)

#test$total <- rescale(test$total,newrange = c(-2,3))

worldmapg <- ggplot(data = test) +
  geom_sf(color = "grey70", fill = "grey80", lwd = 0.1) +
  geom_sf(aes(color = total, fill = total), lwd = 0.1, alpha = 0.9) +
  scale_x_continuous(breaks = seq(-180, 180, by = 30)) +
  scale_y_continuous(breaks = c(seq(-80, 80, by = 20), 85)) +
  rcartocolor::scale_color_carto_c(palette = "Fall", 
                                     na.value = "transparent", 
                                     guide = F, 
                                     direction = -1
                                     #limits = c(-2, 3)
                                     ) +
  rcartocolor::scale_fill_carto_c(palette = "Fall", 
                                    na.value = "grey95",
                                    name = NULL,
                                    direction = -1
                                    #limits = c(-2, 3),
                                    #breaks = -2:3,
                                    #labels = c("-2%", "-1%", "±0%", "+1%", "+2%", "\u2265 +3%")
                                    ) +
  guides(fill = guide_legend(title.position = "top", 
                               title.hjust = 0.5, nrow = 1,
                               label.position = "top")) +
  labs(x = NULL, y = NULL,
         title = "Gold Export Value over 2017 - 2023",
         subtitle = "total gold export value in USD",
         caption = "Data by United Nations ")
```

:::{.column-body-outset}
![](./worldmap_1.png)
:::

### Analysis for South Africa and Kenya

```{r}
#| code-fold: true

ydf <- read.csv('../data/yearly_cleaned_export.csv')
ydf$date <- lubridate::ymd(ydf$date, truncated = 2L)
ydf$flow <- "Export Reported"

ydf2 <- read.csv('../data/yearly_cleaned_import.csv')
ydf2$date <- lubridate::ymd(ydf2$date, truncated = 2L)
ydf2$flow <- "Import Reported"

ydf <- rbind(ydf, ydf2)
rm(ydf2)

#export monthly reported data
df <- read.csv("../data/monthly_cleaned_export.csv")
df$date <- as.Date(df$date)

#import monthly reported data
df_i <- read.csv("../data/monthly_cleaned_import.csv")
df_i$date <- as.Date(df_i$date)

# gold data
gold_df <- read.csv('../data/gold_prices_monthly.csv')
gold_df$date <- as.Date(gold_df$date, format = '%m/%d/%Y')
gold_df$date <- format(gold_df$date,"%Y-%m-01")
gold_df$priceUSD_troyounce <- as.numeric(gsub(",", "", gold_df$priceUSD_troyounce))*32.1507
```

### Compare Yearly and Monthly Aggregated Data

```{r}
#| code-fold: true

r1 <- df[df$cmdCode == 7108 & df$partnerDesc != 'World',] %>% 
  group_by(reporterDesc, partnerDesc) %>% 
  summarise(total_pvalue = sum(primaryValue), total_qty = sum(altQty))

r2 <- ydf[ydf$cmdCode == 7108 & ydf$partnerDesc != 'World' & ydf$flow == "Export Reported",] %>% 
  group_by(reporterDesc, partnerDesc) %>% 
  summarise(total_pvalue = sum(primaryValue), total_qty = sum(altQty))

percent_diff <- function(old_value, new_value) {
  round(((new_value - old_value) / old_value),2)
}

t0 <- inner_join(r1, r2, by = c("partnerDesc", "reporterDesc")) %>% 
  select(reporterDesc, partnerDesc, 
         total_pvalue.x, total_pvalue.y,
         total_qty.x, total_qty.y) %>%
  mutate(Perc_diffpval = percent_diff(total_pvalue.x, total_pvalue.y),
         Perc_diffqty = percent_diff(total_qty.x, total_qty.y)) %>%
  rename(Reporter = reporterDesc, Partner = partnerDesc) %>%
  select(Reporter, Partner, total_pvalue.x, total_pvalue.y, Perc_diffpval,
         total_qty.x, total_qty.y, Perc_diffqty)

tab <- 
  gt(t0) |> 
  tab_header(
    title = "Monthly vs Yearly Aggregated Data"
  ) |> 
  fmt_percent(
    columns = c(Perc_diffpval, Perc_diffqty),
    decimals = 2
  ) |> 
  fmt_currency(
    columns = c(total_pvalue.x, total_pvalue.y),
    currency = "USD",
    decimals = 0
  ) |> 
  fmt_number(
    columns = c(total_qty.x, total_qty.y),
    decimals = 0
  ) |>
  data_color(
    columns = c(Perc_diffpval, Perc_diffqty),
    fn = \(v) lapply(v, \(x) if (is.na(x)) "grey" else if (x < 0) "darkred" else if (x > 0) "darkgreen" else "grey"),
    apply_to = "text"
  ) |>
  cols_label(
    total_pvalue.x = "Monthly Value",
    total_pvalue.y = "Yearly Value",
    Perc_diffpval = "Difference Value (%)",
    total_qty.x = "Monthly Quantity",
    total_qty.y = "Yearly Quantity",
    Perc_diffqty = "Difference Qty (%)"
  ) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_row_groups(groups = 1:2)
  )


tab

cty_missing <- unique(r2$partnerDesc[! r2$partnerDesc %in% r1$partnerDesc])
```

Also the following countries `{r} cty_missing` do not appear in the monthly aggregated data.

```{r}
#| code-fold: true


# replace southafrica export rep data with import rep data

#nrow(df[df$reporterDesc == "South Africa",])
#nrow(df_i[df_i$reporterDesc == "South Africa",])
df <- subset(df, df$reporterDesc !='South Africa')
df <- rbind(df, df_i[df_i$reporterDesc == "South Africa",])


df$qtyTransform <-df$altQty/df$qty
df$unit_price <- df$primaryValue/df$altQty
```


```{r}
#| code-fold: true

gt(df %>% group_by(reporterDesc, partnerDesc) %>% 
     summarise(total = sum(primaryValue)) %>% 
     arrange(reporterDesc, desc(total)) %>%
     top_n(n = 10)) |>
  cols_label(
    partnerDesc = "Partner",
    total = "Cumulative Value"
  ) |>
  tab_header(
    title = "Major Gold Trade partners for Kenya and South Africa"
  ) |> 
  fmt_currency(
    columns = c(total),
    currency = "USD",
    decimals = 0
  ) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_row_groups(groups = 1:2)
  )

```

### Descriptive Statistics

```{r}
#| code-fold: true
#| eval: false
#| echo: false 

source("gt_summarytools.R")

as_tibble(df) %>% gt_summarytools("Comtrade Summary")
```

### Unit Value Plot

```{r}
#| code-fold: true

west <- c("USA", "United Kingdom", "Spain", "France", "Germany", "Turkey", "Italy", "Japan",
          "Rep. of Korea", "Switzerland", "Canada", "Cyprus", "Slovenia", "Poland", "Ireland",
          "Norway", "Austria", "New Zealand", "Luxembourg", "Slovakia", "Estonia", "Denmark",
          "Netherlands", "Belgium", "Sweden", "Czechia", "Australia", "Israel")

africa <- c("Cameroon", "Dem. Rep. of the Congo", "Nigeria", "South Africa", "Ethiopia",
            "Eswatini", "Mozambique", "United Rep. of Tanzania", "Botswana", "Kenya",
            "Uganda", "Namibia", "Zambia", "Mauritius", "Rwanda", "")

ME <- c("United Arab Emirates", "Qatar", "Bahrain", "Saudi Arabia", "Oman")

SE_asia <- c("Indonesia", "Thailand", "Malaysia", "Singapore")

brics <- c("China, Hong Kong SAR", "China, Macao SAR", "Brazil", "India", "China", "Russia")

color_vec <- c("firebrick3", "#00A08A", "#F98400", "#5BBCD6", "#C6CDF7", "#000000", "#CDC08C", "#004990", "#FF0000", "#35274A")

cmdcode_unitprice_plot = function(df, Reporter){

  plot_df <- df[df$reporterDesc == Reporter & df$cmdCode == '7108',]
  
  plot_df$ctyGroup <- "Others"
  plot_df[plot_df$partnerDesc %in% africa,]$ctyGroup <- 'Africa'
  plot_df[plot_df$partnerDesc %in% west,]$ctyGroup <- 'West'
  plot_df[plot_df$partnerDesc %in% c('China', 'China, Hong Kong SAR', 'China, Macao SAR'),]$ctyGroup <- 'China'
  plot_df[plot_df$partnerDesc %in% ME,]$ctyGroup <- 'ME'
  
  if(Reporter != 'Kenya'){
    plot_df[plot_df$partnerDesc %in% c('India'),]$ctyGroup <- 'India'
    #plot_df[plot_df$partnerDesc %in% c('Brazil'),]$ctyGroup <- 'Brazil'
  }
  
  legTitle <- 'Country Group'

  g <- ggplot(data = plot_df, aes(x = date)) + 
    geom_point(aes(y = gold_price), color = "#FAD510", size=2.5, alpha = 0.8) + 
    #geom_point(aes(y = unit_price, color = !!ifelse(Reporter == 'Kenya', sym("ctyGroup"), sym("partnerDesc"))), size=2.5, alpha = 0.8) + 
    geom_point(aes(y = unit_price), size=1.5, color = "#004990") + 
    scale_x_date(date_breaks = "1 year", date_labels = "%Y") + 
    scale_y_continuous(limits = c(0, 75000), labels = scales::label_dollar(scale_cut = scales::cut_short_scale())) +
    theme_bw() + 
    ylab("USD/Kg") + xlab("Date") +  guides(color=guide_legend(title=legTitle)) +
    labs(title = paste(Reporter, '\'s unit price vs gold spot price')) +
    theme(legend.position = "top", legend.title=element_blank()) +
    theme(axis.text.x = element_text(angle=45, hjust = 1)) +
    guides(color = guide_legend(nrow = 1))
  
  #g <- g + scale_color_manual(values = color_vec[1:length(unique(plot_df$ctyGroup))])
  g <- g + facet_wrap( ~ ctyGroup, ncol = 3)
  return(list(g, plot_df))
}
```

```{r, warning=FALSE}
#| code-fold: true

Reporter <- 'South Africa'
plot_stats = cmdcode_unitprice_plot(df, Reporter)

plot1 <- plot_stats[[1]]

Reporter <- 'Kenya'
plot_stats = cmdcode_unitprice_plot(df, Reporter)

plot2 <- plot_stats[[1]]
```

::: {layout-ncol=2 .column-page}
```{r}
#| echo: false
plot1

#ggsave('test.svg', plot1)
```

```{r}
#| echo: false
plot2
```
:::

### Quantity Column Transformation and Correction

```{r}
#| code-fold: true

temp <- data.frame(do.call(rbind, strsplit(as.character(df$unit_price), '\\.')))
temp$altQtyUnitAbbr <- df$altQtyUnitAbbr

# handle grams
#df[which(nchar(temp$X1) == 2),]
df[which(nchar(temp$X1) == 2 & temp$altQtyUnitAbbr == 'g'),]$altQty <- 
  df[which(nchar(temp$X1) == 2 & temp$altQtyUnitAbbr == 'g'),]$altQty/1000
df[which(nchar(temp$X1) == 2 & temp$altQtyUnitAbbr == 'g'),]$unit_price <- 
  df[which(nchar(temp$X1) == 2 & temp$altQtyUnitAbbr == 'g'),]$unit_price*1000

# handle milligrams
df[which(temp$X1 == '0' & substr(temp$X2, start = 1, stop = 1) == '0'),]$altQty <- 
  df[which(temp$X1 == '0' & substr(temp$X2, start = 1, stop = 1) == '0'),]$altQty/1000000

df[which(temp$X1 == '0' & substr(temp$X2, start = 1, stop = 1) == '0'),]$unit_price <- 
  df[which(temp$X1 == '0' & substr(temp$X2, start = 1, stop = 1) == '0'),]$unit_price*1000000

# convert grams to kg
#df[df$altQtyUnitAbbr == 'g',]$altQty <- df[df$altQtyUnitAbbr == 'g',]$altQty/1000
#df$unit_price <- df$primaryValue/df$altQty

# find the difference between gold spot price and unit price
df$gdiff <- df$gold_price - df$unit_price
```

```{r, warning=FALSE}
#| code-fold: true

Reporter <- 'South Africa'
plot_stats = cmdcode_unitprice_plot(df, Reporter)
plot1 <- plot_stats[[1]]

Reporter <- 'Kenya'
plot_stats = cmdcode_unitprice_plot(df, Reporter)
plot2 <- plot_stats[[1]]
```

::: {layout-ncol=2 .column-page}
```{r}
#| echo: false
plot1
```

```{r}
#| echo: false
plot2
```
:::

### Anova Test

```{r}
#| code-fold: true

plot_df <- plot_stats[[2]]
ttestDF <- plot_df[plot_df$ctyGroup == 'West',] %>% select(unit_price, gold_price, date)
ttestDF <- ttestDF[ttestDF$unit_price > 10000 & ttestDF$unit_price < 70000,]
ttestDF <- ttestDF %>% group_by(date) %>% 
  summarise(unit_price = mean(unit_price), gold_price = mean(gold_price)) 

expected <- ttestDF$gold_price
observed <- ttestDF$unit_price
time <- ttestDF$date

wide <- data.frame(expected, observed)
long <- cbind(time, stack(wide))

fm2 <- lm(values ~ ind/(time + 1) + 0, long)
fm1 <- lm(values ~ ind + time + 0, long)
anova(fm1, fm2)
```
`P-value > 0.05`

We ran a linear model with two slopes and and another with one slope. Both have two intercepts. 
Then compare them using anova. The slopes are not significantly different so we cannot reject the NULL hypothesis (the slopes are same).

We can also use the granger test to see if a time series model fit for gold spot price can be used for the unit price. This should indicate if the two trends are same.

### Gold Trade Graph

```{r}
#| code-fold: true

plot_df <- df[df$reporterDesc == "Kenya" & df$cmdCode == 7108,]

plot_df <- plot_df %>% group_by(date) %>% summarise(sum = sum(primaryValue))

plot_df$gold_price <- NA

plot_df <- plot_df %>%
  complete(date = seq(date[1], date[nrow(plot_df)], by = "1 month"), 
           fill = list(sum = 0, gold_price = 0))

plot_df$gold_price <- sapply(plot_df$date, function(x) 
  gold_df[gold_df$date == x,]$priceUSD_troyounce)

yrng <- range(plot_df$sum)
xrng <- range(plot_df$date)
caption <- paste("Kenya Gold Exports\n", "    2017 - 2023")

from <- as.Date('2020-01-01')
to <- as.Date('2022-01-01')

shade <- data.frame(from, to)

breaks.vec <- seq(min(plot_df$date), max(plot_df$date), by = "6 month")
scaleVal <- 1/90
gpriceColor <- "#FAD510"

g <- ggplot(data = plot_df, aes(x = date, y = sum)) + 
    geom_bar(stat = "identity", fill="#004990") +
    geom_point(aes(y = gold_price/scaleVal), size=2, color=gpriceColor) +
    geom_line(aes(y = gold_price/scaleVal), linewidth=1.5, color=gpriceColor) + 
    scale_x_date(expand = c(0.01,0.01), breaks = breaks.vec, date_labels = "%b-%Y") +
    scale_y_continuous(expand = c(0,0), limits = c(0, 7000000), breaks = seq(0, 6000000, by = 1000000), 
                       labels = scales::label_dollar(scale_cut = scales::cut_short_scale()),
                       sec.axis = sec_axis(~.*scaleVal, name="Gold Spot Price (USD/KG)",
                                           labels = scales::label_dollar(scale_cut = 
                                                           scales::cut_short_scale()),
                                           breaks = c(30000,40000,50000,60000,70000))
                       ) +
    annotate(geom = "text", x = xrng[1], y = yrng[2], label = caption, 
             hjust = 0, vjust = 1, size = 4) +
    theme_bw() +
    theme(axis.text.x = element_text(angle=45, hjust = 1),
          axis.title.y = element_text(color = '#004990', size = 13),
          axis.title.y.right = element_text(color = gpriceColor, size = 13)) + 
    theme(panel.grid.minor.x = element_blank()) +
    theme(panel.grid.minor.y = element_blank()) +
    geom_rect(data = shade, inherit.aes=FALSE, aes(xmin = from, xmax = to, ymin = -Inf, ymax = Inf), color="transparent", fill="grey", alpha=0.3) +
    annotate(geom = "curve", x = as.Date('2022-02-01'), y = 6600000, xend = as.Date('2020-12-01'), yend = 6050000, 
             curvature = .2, arrow = arrow(length = unit(2, "mm"))) +
    annotate(geom = "text", x = as.Date('2022-03-01'), y = 6600000, 
             label = "COVID-19 Period", hjust = "left") +
    xlab("Date") + ylab("Gold Export Value (USD)") 
    #theme(plot.background = element_rect(fill = "gray60"),plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "cm"))

```

```{r}
#| echo: false
#| label: fig-trade
#| fig-cap: "Trade value between 2017-2023"

g
```

```{r}
#| code-fold: true
pivoted_df <- df[df$cmdCode == 7108,]
pivoted_df$date <- lubridate::floor_date(pivoted_df$date, "year")

pivoted_df %>% filter(reporterDesc == "South Africa" & partnerDesc == "China") %>% group_by(date) %>% summarise(total = sum(primaryValue)) %>% print(n=200)

pivoted_df <- pivoted_df %>% 
                group_by(reporterDesc, date) %>% 
                summarise(total = sum(primaryValue)) %>%
                pivot_wider(names_from = date, values_from = total) 

pivoted_df <- pivoted_df[,c(1,2,7,8,3,4,5,6)]
pivoted_df <- pivoted_df %>%
  rowwise() %>%
  mutate(
    change_2017_2018 = (`2018-01-01` - `2017-01-01`)/ `2017-01-01`,
    change_2018_2019 = (`2019-01-01` - `2018-01-01`)/ `2018-01-01`,
    change_2019_2020 = (`2020-01-01` - `2019-01-01`)/ `2019-01-01`,
    change_2020_2021 = (`2021-01-01` - `2020-01-01`)/ `2020-01-01`,
    change_2021_2022 = (`2022-01-01` - `2021-01-01`)/ `2021-01-01`,
    change_2022_2023 = (`2023-01-01` - `2022-01-01`)/ `2022-01-01`,
    cumulative = (((change_2017_2018+1)*(change_2018_2019+1)*(change_2019_2020+1)*(change_2020_2021+1)*(change_2021_2022+1)*(change_2022_2023+1)) - 1)*100,
    max_min_change = (`2023-01-01` - `2017-01-01`)/ `2017-01-01`
  ) %>%
  ungroup() 

subset_df <- pivoted_df %>% 
  filter(reporterISO == "ZAF" | reporterISO == "KEN") %>% 
  select(reporterISO, change_2017_2018, change_2018_2019, change_2019_2020, change_2020_2021, change_2021_2022, change_2022_2023)

subset_df <- gather(subset_df, year, value, change_2017_2018:change_2022_2023)
subset_df$year <- lubridate::ymd(gsub(".*_(\\d{4})$", "\\1", subset_df$year), truncated = 2L)
subset_df$value <- round(subset_df$value*100,2)

```

### Compare BRICS and West trade 


```{r}
#| code-fold: true

plot_grouped_bar <- function(country, plot_df){

  plot_df <- plot_df[plot_df$reporterDesc == country & plot_df$bricsflag %in% c('b', 'w') & plot_df$cmdCode == 7108,]
  plot_df <- plot_df %>% group_by(flow, bricsflag, date) %>% summarise(sum = sum(primaryValue))
  
  breaks.vec <- seq(min(plot_df$date), max(plot_df$date), by = "1 year")
  
  ggplot(plot_df, aes(date, sum, fill = bricsflag))+
    geom_bar(stat = "identity", position = position_dodge(preserve = "single"))+
    coord_cartesian(ylim = c(0,max(plot_df$sum))) +
    scale_y_continuous(labels = scales::label_dollar(scale_cut = scales::cut_short_scale()))+
    scale_x_date(breaks = breaks.vec, date_labels = "%Y") +
    ylab("Gold Export Value (USD)") + xlab("Date") +
    guides(fill = guide_legend(title = 'Country Group')) +
    scale_fill_manual(labels = c("BRICS", "West"), values = c("firebrick2", "#004990")) +
    labs(title = country) +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
    facet_grid( ~ flow)
  
}
```


```{r}
#https://oec.world/en/profile/bilateral-product/gold/reporter/zaf?yearGrowth2=exportYear6&yearGrowth=exportYear1&tradeGrowth=flow0
```

```{r}
#| echo: false

# bottom part
# p1 <- ggplot(data=plot_df,aes(date,sum,fill=bricsflag))+
#   geom_bar(stat = "identity", position=position_dodge(preserve = "single"))+
#   coord_cartesian(ylim = c(0,6000000))+ #setting the down part
#   scale_y_continuous(labels = scales::label_dollar(scale_cut = scales::cut_short_scale()))+
#   ylab("Gold Export Value (USD)") + xlab("Date") +
#   guides(fill=guide_legend(title='Country Group')) +
#   scale_fill_manual(labels = c("BRICS", "West"), values = c("red", "blue"))+
#   theme_classic()
# 
# # top part
# p2 <- ggplot(data=plot_df,aes(date,sum,fill=bricsflag))+
#   geom_bar(stat = "identity", position=position_dodge(preserve = "single"))+
#   coord_cartesian(ylim = c(8800000,30000000))+ #setting the upper part
#   scale_y_continuous(breaks = c(8800000, 15000000, 30000000),
#                      labels = scales::label_dollar(scale_cut = scales::cut_short_scale()))+
#   scale_fill_manual(values = c("red", "blue"))+
#   guides(x = "none")+ # remove x line
#   labs(title = "Kenya gold exports to BRICS and West")+
#   theme_classic()+
#   theme(axis.text.x = element_blank(),
#         axis.ticks.x = element_blank(),
#         axis.title = element_blank(),
#         legend.position = "none", # remove legend
#         panel.background = element_blank(),
#         axis.line = element_line(colour = "black"))
# 
# #patchwork
# p2/p1
```



```{r}
#| echo: false
#| label: fig-comp
#| fig-cap: "Comparison"

plot_grouped_bar("Kenya", ydf)
plot_grouped_bar("South Africa", ydf)
```


### Export - Import Discrepancies 

```{r}
#| code-fold: true
#| label: fig-diff
#| fig-cap: "Differences"

selectList <- c('Mali', 'United Rep. of Tanzania', 'Ghana', 'Togo', 'Cameroon', 'Benin', 'Ethiopia',
                'Niger', 'Madagascar', 'Rwanda', 'Mozambique', 'Senegal', 'Burundi')

export <- read.csv('../data/uae_export.csv', row.names = NULL)
colnames(export) <- colnames(export)[2:ncol(export)]
export <- export[1:(ncol(export)-1)]

import <- read.csv('../data/uae_import.csv', row.names = NULL)
colnames(import) <- colnames(import)[2:ncol(import)]
import <- import[1:(ncol(import)-1)]


export <- export[export$reporterDesc %in% selectList,]
export <- export %>% select(reporterDesc, primaryValue)

import <- import[import$partnerDesc %in% selectList,]
import <- import %>% select(partnerDesc, primaryValue)
colnames(import) <- c('reporterDesc', 'primaryValue')

export <- export[export$reporterDesc %in% unique(import$reporterDesc),]
import <- import[import$reporterDesc %in% unique(export$reporterDesc),]

wide <- data.frame(export$primaryValue, import$primaryValue)
long <- cbind(export$reporterDesc, stack(wide))
colnames(long) <- c('Country', 'Value', 'Flag')
long$Value <- long$Value/1000000

right_label <- long %>%
  group_by(Country) %>%
  arrange(desc(Value)) %>%
  top_n(1)

left_label <- long %>%
  group_by(Country) %>%
  arrange(desc(Value)) %>%
  slice(2)


# create data frame that identifies revenue differences over 20%
big_diff <- long %>% 
  spread(Flag, Value) %>% 
  group_by(Country) %>% 
  mutate(Max = max(import.primaryValue, export.primaryValue),
         Min = min(import.primaryValue, export.primaryValue),
         Diff = Max - Min) %>% 
  arrange(desc(Diff)) %>%
  filter(Diff > .2)

# filter the label data frames to only include those cities where the
# difference exceeds 20%
right_label <- filter(right_label, Country %in% big_diff$Country)
left_label <- filter(left_label, Country %in% big_diff$Country)

# filter the main data frame to only include those cities where the 
# difference exceeds 20%.
highlight <- filter(long, Country %in% big_diff$Country)

plot_label <- big_diff %>%
  select(Country, Value = Max, Diff) %>%
  right_join(right_label)

p <- ggplot(long, aes(Value, Country)) +
  geom_line(aes(group = Country), alpha = .5, color = 'gold', linewidth = 1.5) +
  geom_point(aes(color = Flag), size = 3, alpha = .5) +
  #geom_line(data = highlight, aes(group = Country)) +
  geom_point(data = highlight, aes(color = Flag), size = 3, pch=21) +
  geom_text(data = plot_label, aes(color = Flag, 
                                   label = round(Diff, 0)),
            size = 3, hjust = -.8)

p + scale_color_manual(labels = c("Import", "Export"),values = c('gold', 'black')) +
  scale_x_continuous(labels = scales::dollar, expand = c(0.02, 0), 
                     limits = c(0, 2500),
                     breaks = seq(0, 2000, by = 500)) +
  scale_y_discrete(expand = c(.02, 0)) +
  labs(title = "Import - Export Discrepancies", subtitle = "for the year 2016") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        legend.title = element_blank(),
        legend.justification = c(0, 1), 
        legend.position = c(.3, 1.2),
        legend.background = element_blank(),
        legend.direction="horizontal",
        plot.title = element_text(size = 20, margin = margin(b = 10)),
        plot.subtitle = element_text(size = 10, color = "darkslategrey", margin = margin(b = 25)),
        plot.caption = element_text(size = 8, margin = margin(t = 10), color = "grey70", hjust = 0),
        plot.margin = margin(t = 1, r = 1, b = 1, l = 1, unit = "cm"))

```

See figure (see @fig-diff).

# Recommendations 

* Policy Interventions: 

Propose government policies to formalize small-scale mining and combat illegal mining. 

* Trade Partnerships:  

E.g., “Collaborate with Asian buyers (India, China) to secure long-term contracts.” 

* Infrastructure Development: 

Highlight the need for better logistics and refining facilities. 

* Diversification: 

E.g., “Encourage value addition by exporting refined gold instead of raw ore.” 

* Investment Opportunities: 

Identify regions with untapped mining potential. 

 

# Conclusion 

Recap the findings, e.g., “While South Africa remains a key exporter, emerging players like Ghana and Mali present significant growth opportunities.” 

Reinforce the importance of addressing challenges like illegal mining and unstable supply chains to maximize export potential. 

# Appendices 

Data Visuals: Include detailed graphs or maps, e.g., export volumes by region, market share comparisons. 

Technical Details: Methodology breakdown, Python/R scripts (if required). 

Glossary: Define terms like "refined gold," "artisanal mining," etc. 

# References 

Cite data sources (e.g., UN Comtrade, World Bank). 

Acknowledge reports from industry experts, e.g., “Gold Mining in Africa 2023” by Mining Weekly. 

